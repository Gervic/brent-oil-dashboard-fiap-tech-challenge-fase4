import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import yfinance as yf
import requests
import pickle
import joblib
import os

# Page configuration
st.set_page_config(
    page_title="Brent Oil Price Dashboard",
    page_icon="üõ¢Ô∏è",
    layout="wide"
)

# Title and description
st.title("üõ¢Ô∏è Dashboard de an√°lise do pre√ßo do petr√≥leo Brent")
st.markdown("""
Este dashboard fornece uma an√°lise abrangente dos pre√ßos do petr√≥leo Brent, incluindo:
- Tend√™ncia hist√≥rica
- Volatilidade dos pre√ßos
- Padr√µes sazonais
- Forecast do pre√ßo do pr√≥ximo dia
""")

# Function to load data
@st.cache_data
def load_data():
    # Obter dados do Brent do yfinance
    ticker = "BZ=F"  # C√≥digo do Brent 
    data = yf.download(ticker, start="2010-01-01", end=datetime.now().strftime("%Y-%m-%d"))
    # Diagn√≥stico
    if data.empty:
        st.error("‚ùå Falha ao carregar dados do Yahoo Finance")
        raw_data_link = 'https://raw.githubusercontent.com/Gervic/brent-oil-dashboard-fiap-tech-challenge-fase4/refs/heads/main/petrol_price_data.csv'
        raw_data = pd.read_csv(raw_data_link, sep=';')
        brent_data = raw_data[['Date', 'petrol_price']]
        brent_data['petrol_price'] = brent_data['petrol_price'].str.replace(',', '.').astype(float)
        st.info('Dados carregados da base hist√≥rica dispon√≠vel no Github')
        return brent_data
    else:
        return data

# Load the data
data = load_data()

# Create tabs for different visualizations
tab1, tab2, tab3 = st.tabs(["Tend√™ncias do pre√ßo", "Volatilidade", "Forecast"])

#Dicion√°rio de Eventos e Fun√ß√£o para Anota√ß√µes
# Dicion√°rio de eventos geopol√≠ticos e econ√¥micos relevantes
events = {
    '2011-03-15': {'event': 'Primavera √Årabe', 'desc': 'Revoltas no Oriente M√©dio e Norte da √Åfrica'},
    '2014-11-27': {'event': 'OPEP n√£o corta produ√ß√£o', 'desc': 'OPEP mant√©m produ√ß√£o apesar dos pre√ßos em queda'},
    '2016-01-16': {'event': 'San√ß√µes do Ir√£ removidas', 'desc': 'Fim das san√ß√µes ao Ir√£ aumenta oferta global'},
    '2016-11-30': {'event': 'Acordo OPEP', 'desc': 'OPEP concorda em cortar produ√ß√£o pela primeira vez desde 2008'},
    '2019-12-06': {'event': 'OPEP+ Cortes', 'desc': 'OPEP+ aumenta cortes de produ√ß√£o em 500.000 barris/dia'},
    '2020-03-08': {'event': 'Guerra de Pre√ßos', 'desc': 'Ar√°bia Saudita inicia guerra de pre√ßos ap√≥s falha em acordo com R√∫ssia'},
    '2020-03-11': {'event': 'Pandemia COVID-19', 'desc': 'OMS declara pandemia global'},
    '2020-04-20': {'event': 'WTI Negativo', 'desc': 'Pre√ßo do petr√≥leo WTI cai para valores negativos'},
    '2021-10-04': {'event': 'Crise Energ√©tica', 'desc': 'Escassez de g√°s natural e carv√£o eleva demanda por petr√≥leo'},
    '2022-02-24': {'event': 'Invas√£o da Ucr√¢nia', 'desc': 'R√∫ssia invade a Ucr√¢nia'},
    '2022-03-31': {'event': 'Libera√ß√£o Reservas', 'desc': 'EUA anuncia libera√ß√£o de 180 milh√µes de barris da reserva estrat√©gica'},
    '2023-04-02': {'event': 'Corte OPEP+', 'desc': 'OPEP+ anuncia corte surpresa de mais de 1 milh√£o de barris/dia'},
    '2023-10-07': {'event': 'Conflito Israel-Hamas', 'desc': 'In√≠cio do conflito entre Israel e Hamas'}
}

with tab1:
    st.header("Tend√™ncias do pre√ßo do petr√≥leo Brent")

    # Lendo e preparando os dados
    try:
        df = data['Close'].reset_index().rename(columns={'BZ=F': 'petrol_price'})
    except:
        df = data.copy()
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.sort_values(by='Date')
    df = df.set_index('Date')

    st.sidebar.header('`Brent Oil Price Analytics`')
    st.sidebar.image("https://github.com/Gervic/brent-oil-dashboard-fiap-tech-challenge-fase4/blob/main/brent-oil-image.jpg", width=100)
    st.sidebar.info(f"Dados atualizados at√©: {df.index.max().strftime('%d/%m/%Y')}")
    ma50 = st.sidebar.slider("M√©dia m√≥vel curta (dias)", 10, 100, 50)
    ma200 = st.sidebar.slider("M√©dia m√≥vel longa (dias)", 50, 300, 200)
    show_all_events = st.sidebar.checkbox("Mostrar no gr√°fico todos os eventos relevantes?", value=False)

    # C√°lculos
    df['volatility_30d'] = df['petrol_price'].rolling(window=30).std()
    df['ma50'] = df['petrol_price'].rolling(window=ma50).mean()
    df['ma200'] = df['petrol_price'].rolling(window=ma200).mean()
    df['price_change'] = df['petrol_price'].diff()
    df['price_pct_change'] = df['petrol_price'].pct_change() * 100
    monthly_avg = df['petrol_price'].resample('M').mean()
    yearly_avg = df['petrol_price'].resample('Y').mean()

    st.markdown("### M√©tricas")
    col1, col2, col3, col4 = st.columns(4)
    current_price = df['petrol_price'].iloc[-1]
    prev_price = df['petrol_price'].iloc[-2]
    pct_change = (current_price - prev_price) / prev_price * 100
    vol_30d = df['volatility_30d'].iloc[-1]
    
    col1.metric("Pre√ßo Atual", f"US$ {current_price:.2f}")
    col2.metric("Pre√ßo Anterior", f"US$ {prev_price:.2f}")
    col3.metric("%DoD", f"{pct_change:.2f}%")
    col4.metric("M√©dia 30 dias", f"US$ {df['petrol_price'].tail(30).mean():.2f}")
          
    fig = go.Figure()
    # Pre√ßo do petr√≥leo
    fig.add_trace(go.Scatter(
        x=df.index,
        y=df['petrol_price'],
        mode='lines',
        name='Pre√ßo Brent (USD)',
        line=dict(color='#1f77b4', width=2)
    ))
    
    # M√©dias m√≥veis
    fig.add_trace(go.Scatter(
        x=df.index,
        y=df['ma50'],
        mode='lines',
        name=f'MM{ma50}',
        line=dict(color='green', dash='dash')
    ))
    
    fig.add_trace(go.Scatter(
        x=df.index,
        y=df['ma200'],
        mode='lines',
        name=f'MM{ma200}',
        line=dict(color='red', dash='dot')
    ))

    
    # Layout
    fig.update_layout(
        title="üìâ Evolu√ß√£o dos Pre√ßos do Petr√≥leo Brent",
        xaxis_title="Data",
        yaxis_title="Pre√ßo (USD)",
        template="plotly_white",
        legend=dict(x=0, y=1),
        hovermode="x unified",
        height=600
    )
    
    # Mostrar no Streamlit
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("---")


    st.markdown("""
    Este gr√°fico principal mostra a trajet√≥ria completa dos pre√ßos do petr√≥leo Brent
    ao longo de 15 anos, revelando ciclos dram√°ticos de alta e baixa:
    
    ‚óè Per√≠odo 2011-2014: Observamos um patamar elevado e relativamente
    est√°vel de pre√ßos (acima de $100), sustentado pela crescente demanda
    chinesa e pelas tens√µes geopol√≠ticas durante a Primavera √Årabe que
    reduziram a oferta da L√≠bia e geraram incertezas sobre outros produtores
    da regi√£o.
    
    ‚óè Colapso 2014-2016: Queda acentuada de pre√ßos que come√ßou quando a
    OPEP decidiu n√£o cortar produ√ß√£o em novembro de 2014, preferindo
    manter participa√ß√£o de mercado frente ao crescimento do xisto
    americano. A remo√ß√£o das san√ß√µes contra o Ir√£ em janeiro de 2016
    ampliou a oferta global, pressionando ainda mais os pre√ßos para baixo.
    
    ‚óè Recupera√ß√£o 2016-2018: Per√≠odo de estabiliza√ß√£o e recupera√ß√£o gradual
    ap√≥s o hist√≥rico Acordo da OPEP de novembro de 2016, quando o cartel
    concordou em cortar produ√ß√£o pela primeira vez desde 2008, em
    coordena√ß√£o com produtores n√£o-OPEP, como a R√∫ssia.
    
    ‚óè Choque pand√™mico 2020: O colapso mais dram√°tico da s√©rie, quando a
    conjun√ß√£o da Pandemia COVID-19 e a Guerra de Pre√ßos entre R√∫ssia e
    Ar√°bia Saudita levou a uma queda sem precedentes, chegando ao ponto
    do WTI americano registrar pre√ßos negativos em abril de 2020.
    
    ‚óè Recupera√ß√£o p√≥s-pandemia 2020-2022: Forte ascens√£o a partir de n√≠veis
    extremamente baixos, impulsionada pela reabertura econ√¥mica global,
    pela disciplina de produ√ß√£o da OPEP+ e pelos pacotes de est√≠mulo que
    fomentaram a demanda.
    
    ‚óè Crise energ√©tica e Guerra na Ucr√¢nia 2021-2022: A Invas√£o da Ucr√¢nia
    pela R√∫ssia em fevereiro de 2022 elevou os pre√ßos a patamares pr√≥ximos
    de $130, refletindo riscos de oferta do segundo maior exportador mundial.
    Anteriormente, j√° havia press√£o de alta devido √† Crise Energ√©tica que
    elevou a demanda por petr√≥leo como substituto do g√°s natural
    """)
 
    df_monthly = df.copy()
    df_monthly["month"] = df_monthly.index.month
    df_monthly["year"] = df_monthly.index.year
    
    # Boxplot da sazonalidade mensal com Plotly Express
    fig = px.box(df_monthly, x="month", y="petrol_price", points="outliers",
                 labels={"month": "M√™s", "petrol_price": "Pre√ßo (USD)"},
                 category_orders={"month": list(range(1, 13))},
                 title="Sazonalidade Mensal dos Pre√ßos do Petr√≥leo Brent (2010-2025)")
    
    # C√°lculo da m√©dia mensal
    monthly_means = df_monthly.groupby("month")["petrol_price"].mean()
    
    # Adiciona linha de m√©dias mensais
    fig.add_trace(go.Scatter(
        x=list(range(1, 13)),
        y=monthly_means.values,
        mode="lines+markers",
        line=dict(color="red", width=3),
        marker=dict(size=8),
        name="M√©dia Mensal"
    ))
    
    # Adiciona anota√ß√µes
    fig.add_annotation(
        x=12,
        y=monthly_means[12],
        text="Maior demanda por<br>aquecimento<br>Hemisf√©rio Norte",
        showarrow=True,
        arrowhead=1,
        ax=30,
        ay=-30,
        bgcolor="white"
    )
    
    fig.add_annotation(
        x=7,
        y=monthly_means[7],
        text="Temporada de<br>viagens de ver√£o<br>Hemisf√©rio Norte",
        showarrow=True,
        arrowhead=1,
        ax=50,
        ay=50,
        bgcolor="white"
    )
    
    # Customiza√ß√µes de layout
    fig.update_layout(
        xaxis=dict(
            tickmode="array",
            tickvals=list(range(1, 13)),
            ticktext=['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun',
                      'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
        ),
        yaxis_title="Pre√ßo (USD)",
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        template="plotly_white"
    )
    
    # Mostrar no Streamlit
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    A an√°lise de sazonalidade revela padr√µes mensais que persistem apesar da alta
    volatilidade do mercado:
    
    ‚óè Inverno no Hemisf√©rio Norte (novembro-fevereiro): Tend√™ncia de pre√ßos
    mais altos devido √† maior demanda para aquecimento, que complementa
    o consumo regular para transporte e outros usos.
    
    ‚óè Ver√£o no Hemisf√©rio Norte (junho-agosto): Leve aumento de pre√ßos
    associado √† temporada de viagens, quando aumenta o consumo de
    combust√≠veis para transporte.
    
    ‚óè Transi√ß√µes sazonais (mar√ßo-abril e setembro-outubro): Per√≠odos de
    relativa fraqueza de pre√ßos, quando a demanda sazonal diminui.
    A an√°lise boxplot mostra tamb√©m a alta variabilidade dentro de cada m√™s,
    indicando que fatores fundamentais e geopol√≠ticos frequentemente superam os
    padr√µes sazonais.
    """)

with tab2:
    st.header("Volatilidade do pre√ßo do petr√≥leo Brent")
    c1, c2 = st.columns(2)
    with c1:
        st.markdown('#### Volatilidade')
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df.index,
            y=df['volatility_30d'],
            mode='lines',
            name='30-Day Volatility',
            line=dict(color='#E74C3C')
        ))
        
        fig.update_layout(
            title="Desvio padr√£o m√≥vel de 30 dias",
            xaxis_title="Data",
            yaxis_title="Volatilidade",
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        O gr√°fico de volatilidade revela per√≠odos de maior incerteza e instabilidade no
        mercado:
        
        ‚óè 2022: O ano com maior volatilidade m√©dia da s√©rie hist√≥rica, impulsionado
        pela Invas√£o da Ucr√¢nia e subsequentes san√ß√µes ocidentais ao petr√≥leo
        russo, al√©m da interven√ß√£o dos EUA com a Libera√ß√£o de Reservas
        Estrat√©gicas tentando conter a alta de pre√ßos.
        
        ‚óè 2020: Segundo ano mais vol√°til, dominado pelo choque da Pandemia
        COVID-19 e pela Guerra de Pre√ßos entre Ar√°bia Saudita e R√∫ssia,
        resultando em uma combina√ß√£o catastr√≥fica de colapso de demanda e
        aumento de oferta.
        
        ‚óè 2011-2012: Pico de volatilidade associado √† Primavera √Årabe e interrup√ß√µes
        de fornecimento na L√≠bia, S√≠ria e outros pa√≠ses produtores da regi√£o.
        
        ‚óè 2014-2016: Alta volatilidade durante o colapso de pre√ßos provocado pela
        estrat√©gia da OPEP de n√£o cortar produ√ß√£o e pelo excesso de oferta
        global.
        
        A an√°lise deste gr√°fico mostra claramente que os choques geopol√≠ticos e as
        mudan√ßas abruptas de pol√≠tica dos principais produtores s√£o os maiores
        causadores de volatilidade no mercado petrol√≠fero.
        """)
    with c2:
        st.markdown('#### Pre√ßos de acordo com as altas/baixas do mercado')
        def identify_market_phases(series, threshold=0.2):
          bull_markets = []
          bear_markets = []
          
          # Initialize variables
          in_bull = False
          in_bear = False
          start_idx = 0
          peak = series.iloc[0]
          trough = series.iloc[0]
          
          for i in range(1, len(series)):
              current_price = series.iloc[i]
              
              # Check for bull market
              if not in_bull and current_price >= trough * (1 + threshold):
                  if in_bear:
                      # End of bear market
                      bear_markets.append((start_idx, i-1, series.index[start_idx], series.index[i-1], 
                                            peak, trough, (trough - peak) / peak))
                      in_bear = False
                  
                  # Start of bull market
                  in_bull = True
                  start_idx = i
                  trough = current_price
              
              # Check for bear market
              elif not in_bear and current_price <= peak * (1 - threshold):
                  if in_bull:
                      # End of bull market
                      bull_markets.append((start_idx, i-1, series.index[start_idx], series.index[i-1], 
                                          trough, peak, (peak - trough) / trough))
                      in_bull = False
                  
                  # Start of bear market
                  in_bear = True
                  start_idx = i
                  peak = current_price
              
              # Update peak and trough
              if in_bull and current_price > peak:
                  peak = current_price
              elif in_bear and current_price < trough:
                  trough = current_price
          
          # Handle the last phase
          if in_bull:
              bull_markets.append((start_idx, len(series)-1, series.index[start_idx], series.index[-1], 
                                  trough, peak, (peak - trough) / trough))
          elif in_bear:
              bear_markets.append((start_idx, len(series)-1, series.index[start_idx], series.index[-1], 
                                  peak, trough, (trough - peak) / peak))
          
          return bull_markets, bear_markets
            
        # Use monthly average for market phase identification to reduce noise
        bull_markets, bear_markets = identify_market_phases(monthly_avg, threshold=0.2)
        
        # Criando gr√°fico com Plotly
        fig = go.Figure()
        
        # Linha do pre√ßo
        fig.add_trace(go.Scatter(x=monthly_avg.index, y=monthly_avg.values,
                                 mode='lines', name='Pre√ßo M√©dio Mensal', line=dict(color='gray')))
        
        # Regi√µes de Bull Markets (verde)
        for start_idx, end_idx, start_date, end_date, *_ in bull_markets:
            fig.add_vrect(x0=start_date, x1=end_date, fillcolor="green", opacity=0.2,
                          line_width=0, annotation_text="Alta", annotation_position="top left")
        
        # Regi√µes de Bear Markets (vermelho)
        for start_idx, end_idx, start_date, end_date, *_ in bear_markets:
            fig.add_vrect(x0=start_date, x1=end_date, fillcolor="red", opacity=0.2,
                          line_width=0, annotation_text="Baixa", annotation_position="top left")
        
        # Layout
        fig.update_layout(
            title="Ciclos de Alta (verde) e Baixa (vermelho) - Pre√ßo do Petr√≥leo Brent",
            xaxis_title="Data",
            yaxis_title="Pre√ßo (USD)",
            hovermode="x unified",
            xaxis=dict(showgrid=True),
            yaxis=dict(showgrid=True),
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)

        st.markdown("""
        Este gr√°fico identifica per√≠odos distintos de mercados em alta (verde) e baixa
        (vermelho), definidos como movimentos de pelo menos 20% nos pre√ßos:
        
        ‚óè Ciclo de Alta 2020-2022: O mais expressivo da s√©rie (+183,8%), indo de
        $43,24 em julho de 2020 a $122,71 em agosto de 2022. Este rally
        extraordin√°rio foi impulsionado pela combina√ß√£o de recupera√ß√£o da
        demanda p√≥s-pandemia, cortes de produ√ß√£o da OPEP+ e o choque da
        invas√£o da Ucr√¢nia.
        
        ‚óè Ciclo de Baixa 2020: A queda mais acentuada e r√°pida (-66,8%), ocorrida
        entre fevereiro e abril de 2020, quando a Pandemia COVID-19 e a Guerra
        de Pre√ßos causaram disrup√ß√£o sem precedentes.
        
        ‚óè Ciclo de Alta 2016-2018: Um per√≠odo prolongado de recupera√ß√£o (+75,0%)
        que durou 30 meses, come√ßando ap√≥s o acordo hist√≥rico da OPEP+ e
        sustentado pelo crescimento econ√¥mico global sincronizado.
        
        ‚óè Ciclo de Baixa 2014-2016: Duas quedas consecutivas e severas (-44,6% e
        -49,2%) durante um per√≠odo de 14 meses, quando o mercado ajustou-se
        ao excesso de oferta do xisto americano e √† decis√£o da OPEP de priorizar
        a participa√ß√£o de mercado sobre pre√ßos.
        
        Este gr√°fico demonstra como os ciclos de petr√≥leo tendem a ser assim√©tricos: as
        quedas geralmente s√£o mais r√°pidas e acentuadas do que as recupera√ß√µes, que
        costumam ser mais graduais.
        """)

with tab3:
    st.header("Previsao do Pre√ßo do Petroleo Brent")
    @st.cache_resource
    def load_model():
        return joblib.load('prophet_model.pkl')
        
    model = load_model()
    days = st.number_input("Quantos dias para prever?", min_value=1, max_value=365, value=7)
    
    future_dates = model.make_future_dataframe(periods=days)
    
    # Gerar previs√£o
    forecast = model.predict(future_dates)
    
    # Exibir resultado
    st.write("Previs√£o do pre√ßo em US$ para os pr√≥ximos {} dias:".format(days))
    st.write(forecast[['ds', 'yhat']].tail(days))
    
    # Plotar previs√£o
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df.index, y=df['petrol_price'], mode='lines', name='Hist√≥rico'))
    fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'], mode='lines', name='Previs√£o'))
    fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat_upper'], mode='lines', name='Limite superior', line=dict(dash='dot'), opacity=0.3))
    fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat_lower'], mode='lines', name='Limite inferior', line=dict(dash='dot'), opacity=0.3))
    
    fig.update_layout(title="Previs√£o com Prophet", xaxis_title="Data", yaxis_title="Valor", template="plotly_white")
    st.plotly_chart(fig, use_container_width=True)
    

# Add footer
st.markdown("---")
st.markdown("Data source: Yahoo Finance (BZ=F)") 
